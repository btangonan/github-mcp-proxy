# ===================================
# GitHub MCP Server Configuration
# ===================================

# REQUIRED: Your GitHub Personal Access Token
# Get one at: https://github.com/settings/tokens
# Required scopes:
#   - public_repo (basic read access)
#   - repo (full access - required for PR creation)
GITHUB_PAT=ghp_yourPersonalAccessTokenHere

# Server Configuration
PORT=8788
HOST=localhost

# GitHub API Configuration
GITHUB_API_TIMEOUT=30000      # 30 seconds
GITHUB_RETRY_ATTEMPTS=3        # Number of retry attempts

# Rate Limiting Configuration
RATE_LIMIT_WINDOW=900000       # 15 minutes in milliseconds
RATE_LIMIT_MAX=1000           # Max requests per window

# Cache Configuration
CACHE_TTL=300000              # 5 minutes in milliseconds
CACHE_MAX_SIZE=1000           # Max number of cached items

# Security Configuration
BODY_SIZE_LIMIT=10mb          # Max request body size
TRUST_PROXY=false             # Set to true if behind a proxy
ALLOWED_ORIGINS=https://chatgpt.com,https://chat.openai.com,https://platform.openai.com

# MCP Authentication
# Optional Bearer token for /mcp endpoints
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# If set: requests WITH token are validated, requests WITHOUT token are allowed (ChatGPT compatibility)
# If empty: all requests allowed
MCP_AUTH_TOKEN=                # Leave empty to disable auth entirely

# MCP Write Secret (Path-Based Security for Write Operations)
# Unguessable secret required in URL path for write operations
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# Usage:
#   - Read operations: POST https://your-server.com/mcp
#   - Write operations: POST https://your-server.com/mcp/<SECRET>
# If empty: write operations are completely disabled
# If set: write tools require /mcp/<SECRET> path
MCP_WRITE_SECRET=              # Example: 63d8fd675336252cf31ef502684ce7a28bf2585f3f2f9e3a67027802d131d8fa

# ===================================
# SECURITY OVERVIEW
# ===================================
# This MCP server has multiple layers of security:
#
# 1. Path-Based Write Secret (NEW - PRIMARY WRITE PROTECTION)
#    - MCP_WRITE_SECRET enables secret-in-URL pattern for write operations
#    - Read operations: /mcp (publicly accessible)
#    - Write operations: /mcp/<SECRET> (requires secret in path)
#    - Prevents casual drive-by writes while keeping reads open
#    - Rotate secret if URL leaks
#    - Write tools: create_branch, commit_files, create_pull_request,
#                   update_pull_request, merge_pull_request, create_issue,
#                   update_issue, add_issue_comment, add_pull_request_review_comment
#
# 2. Bearer Token Authentication (OPTIONAL)
#    - MCP_AUTH_TOKEN provides optional authentication for /mcp endpoints
#    - If set: validates token when provided, allows requests without token (ChatGPT compatible)
#    - If empty: all requests allowed
#    - Use when you have clients that CAN send custom headers
#
# 3. Repository Whitelist (CRITICAL SECURITY CONTROL)
#    - Only repositories in PR_WHITELIST can have PRs created/merged
#    - Prevents unauthorized access to repos not in your control
#    - Use patterns like owner/* for all repos under an owner
#    - Works in conjunction with write secret for defense-in-depth
#
# 4. GitHub Token Permissions
#    - GITHUB_PAT scopes determine what the server can access
#    - Limit token to only repos you want accessible
#    - Use fine-grained tokens for better control
#
# 5. Rate Limiting
#    - Global rate limit: RATE_LIMIT_MAX requests per RATE_LIMIT_WINDOW
#    - PR-specific limits: PR_RATE_LIMIT_MAX, PR_MERGE_RATE_LIMIT_MAX
#    - Prevents abuse and excessive API calls
#
# 6. CORS Protection
#    - ALLOWED_ORIGINS restricts which websites can call the API
#    - Default: ChatGPT and OpenAI platform only
#
# 7. Audit Logging
#    - All PR operations logged to PR_AUDIT_LOG
#    - Track who did what and when
#    - Essential for security review
#
# 8. Input Validation
#    - All inputs sanitized and validated
#    - Path traversal protection
#    - Branch name format validation
#    - Size limits: title ≤256 chars, body ≤10k, files ≤20, file size ≤256KB
#
# RECOMMENDED SETUP:
#   1. Set MCP_WRITE_SECRET to protect write operations via URL path
#   2. Configure PR_WHITELIST to limit repos accessible for writes
#   3. Use /mcp for ChatGPT read-only operations
#   4. Use /mcp/<SECRET> for ChatGPT write operations
#   5. Rotate MCP_WRITE_SECRET if URL is leaked or exposed

# Logging Configuration
LOG_LEVEL=info                # debug, info, warn, error
ENABLE_ACCESS_LOG=false       # Enable access logging

# ===================================
# PR Creation Configuration (OPTIONAL)
# ===================================

# Enable PR Creation Feature
# WARNING: This allows ChatGPT to create pull requests in whitelisted repos
PR_ENABLED=false

# Repository Whitelist
# Comma-separated list of repos that can have PRs created
# Format: owner/repo or owner/* for all repos under owner
# Examples:
#   - btangonan/project1,btangonan/project2
#   - myorg/*,btangonan/specific-repo
PR_WHITELIST=

# PR Rate Limiting (separate from general rate limit)
PR_RATE_LIMIT_MAX=5           # Max PRs per window
PR_RATE_LIMIT_WINDOW=3600000  # 1 hour in milliseconds

# PR Audit Logging
# Path to audit log file for PR operations
PR_AUDIT_LOG=./pr_audit.log

# PR Template Requirements
# If true, all PR bodies must include [ChatGPT] tag
PR_TEMPLATE_REQUIRED=false

# ===================================
# PR Merge Configuration (OPTIONAL)
# ===================================
# Enable PR Merge Feature
# WARNING: This allows ChatGPT to merge pull requests in whitelisted repos
PR_MERGE_ENABLED=false

# PR Merge Rate Limiting (separate from PR creation rate limit)
PR_MERGE_RATE_LIMIT_MAX=5
PR_MERGE_RATE_LIMIT_WINDOW=3600000  # 1 hour in milliseconds

# Note: PAT typically requires 'repo' scope for merges. Some org policies may also require 'read:org' to read checks.

# ===================================
# PR Update Configuration (OPTIONAL)
# ===================================
# Enable PR Update Feature (independent of PR creation)
# Allows editing PR title/body/state/base/draft and requesting reviewers
PR_UPDATE_ENABLED=false

# ===================================
# Example PR Configuration (uncomment to enable)
# ===================================

# PR_ENABLED=true
# PR_WHITELIST=btangonan/test-repo,btangonan/another-repo
# PR_RATE_LIMIT_MAX=5
# PR_RATE_LIMIT_WINDOW=3600000
# PR_AUDIT_LOG=./pr_audit.log
# PR_TEMPLATE_REQUIRED=true
# PR_UPDATE_ENABLED=true
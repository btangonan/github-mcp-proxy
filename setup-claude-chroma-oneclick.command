#!/usr/bin/env bash
# Claude-Chroma One-Click Setup for macOS
# Just double-click this file to set up ChromaDB for this directory!
# Version: 3.5.3-oneclick

set -euo pipefail

# Get the directory where this script is located (where user double-clicked)
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_DIR="$SCRIPT_DIR"
PROJECT_NAME="$(basename "$PROJECT_DIR")"

# Colors for output
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly RED='\033[0;31m'
readonly NC='\033[0m'

# Create temporary directory for extraction
TEMP_DIR="$(mktemp -d)"
trap "rm -rf '$TEMP_DIR'" EXIT

clear
echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${YELLOW}🚀 Claude-Chroma One-Click Setup${NC}"
echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo -e "${BLUE}Setting up ChromaDB for:${NC}"
echo "  📁 Project: $PROJECT_NAME"
echo "  📍 Location: $PROJECT_DIR"
echo ""
echo "Please wait while we configure everything automatically..."
echo ""

# Extract embedded claude-chroma.sh
echo -e "${BLUE}⏳ Extracting setup script...${NC}"
base64 -d > "$TEMP_DIR/claude-chroma.sh" <<'SCRIPT_BASE64'

SCRIPT_BASE64
chmod +x "$TEMP_DIR/claude-chroma.sh"

# Extract template
echo -e "${BLUE}⏳ Extracting template...${NC}"
mkdir -p "$PROJECT_DIR/templates"
base64 -d > "$PROJECT_DIR/templates/CLAUDE.md.tpl" <<'TEMPLATE_BASE64'
IyBDTEFVREUubWQg4oCUIFByb2plY3QgQ29udHJhY3QKCioqUHVycG9zZSoqOiBGb2xsb3cgdGhpcyBpbiBldmVyeSBzZXNzaW9uIGZvciB0aGlzIHJlcG8uIEtlZXAgbWVtb3J5IHNoYXJwLiBLZWVwIG91dHB1dHMgY29uY3JldGUuIEN1dCByZXdvcmsuCgojIyDwn6egIFByb2plY3QgTWVtb3J5IChDaHJvbWEpClVzZSBzZXJ2ZXIgYGNocm9tYWAuIENvbGxlY3Rpb24gYCR7UFJPSkVDVF9DT0xMRUNUSU9OfWAuCgpMb2cgYWZ0ZXIgYW55IGNvbmZpcm1lZCBmaXgsIGRlY2lzaW9uLCBnb3RjaGEsIG9yIHByZWZlcmVuY2UuCgoqKlNjaGVtYToqKgotICoqZG9jdW1lbnRzKio6IDHigJMyIHNlbnRlbmNlcy4gVW5kZXIgMzAwIGNoYXJzLgotICoqbWV0YWRhdGFzKio6IGB7ICJ0eXBlIjoiZGVjaXNpb258Zml4fHRpcHxwcmVmZXJlbmNlIiwgInRhZ3MiOiJjb21tYSxzZXBhcmF0ZWQiLCAic291cmNlIjoiZmlsZXxQUnxzcGVjfGlzc3VlIiB9YAotICoqaWRzKio6IHN0YWJsZSBzdHJpbmcgaWYgdXBkYXRpbmcgdGhlIHNhbWUgZmFjdC4KCiMjIyBDaHJvbWEgQ2FsbHMKYGBgamF2YXNjcmlwdAovLyBDcmVhdGUgb25jZToKbWNwX19jaHJvbWFfX2Nocm9tYV9jcmVhdGVfY29sbGVjdGlvbiB7ICJjb2xsZWN0aW9uX25hbWUiOiAiJHtQUk9KRUNUX0NPTExFQ1RJT059IiB9CgovLyBBZGQ6Cm1jcF9fY2hyb21hX19jaHJvbWFfYWRkX2RvY3VtZW50cyB7CiAgImNvbGxlY3Rpb25fbmFtZSI6ICIke1BST0pFQ1RfQ09MTEVDVElPTn0iLAogICJkb2N1bWVudHMiOiBbIjx0ZXh0PiJdLAogICJtZXRhZGF0YXMiOiBbeyJ0eXBlIjoiPHR5cGU+IiwidGFncyI6ImEsYixjIiwic291cmNlIjoiPHNyYz4ifV0sCiAgImlkcyI6IFsiPHN0YWJsZS1pZD4iXQp9CgovLyBRdWVyeSAoc3RhcnQgd2l0aCA1OyBlc2NhbGF0ZSBvbmx5IGlmIDwzIHN0cm9uZyBoaXRzKToKbWNwX19jaHJvbWFfX2Nocm9tYV9xdWVyeV9kb2N1bWVudHMgewogICJjb2xsZWN0aW9uX25hbWUiOiAiJHtQUk9KRUNUX0NPTExFQ1RJT059IiwKICAicXVlcnlfdGV4dHMiOiBbIjxxdWVyeT4iXSwKICAibl9yZXN1bHRzIjogNQp9CmBgYAoKIyMg8J+UjSBSZXRyaWV2YWwgQ2hlY2tsaXN0IEJlZm9yZSBDb2RpbmcKMS4gUXVlcnkgQ2hyb21hIGZvciByZWxhdGVkIG1lbW9yaWVzLgoyLiBDaGVjayByZXBvIGZpbGVzIHRoYXQgbWF0Y2ggdGhlIHRhc2suCjMuIExpc3Qgb3BlbiBQUnMgb3IgaXNzdWVzIHRoYXQgdG91Y2ggdGhlIHNhbWUgYXJlYS4KNC4gT25seSB0aGVuIHByb3Bvc2UgY2hhbmdlcy4KCiMjIOKaoSBBY3RpdmF0aW9uClJlYWQgdGhpcyBmaWxlIGF0IHNlc3Npb24gc3RhcnQuClRoZW4gcmVhZCBgLmNocm9tYS9jb250ZXh0LyoubWRgICh0aXRsZXMgKyBmaXJzdCBidWxsZXRzKSBhbmQgbGlzdCB3aGljaCBvbmVzIHlvdSB1c2VkLgpSdW4gYGJpbi9jaHJvbWEtc3RhdHMucHlgIGFuZCBhbm5vdW5jZTogKipDb250cmFjdCBsb2FkZWQuIFVzaW5nIENocm9tYSAke1BST0pFQ1RfQ09MTEVDVElPTn0uIEZvdW5kIFtOXSBtZW1vcmllcyAoYnkgdHlwZSAuLi4pLioqCgojIyDwn6e5IFNlc3Npb24gSHlnaWVuZQpQcnVuZSB0byBsYXN0IDIwIHR1cm5zIGlmIGNvbnRleHQgZ2V0cyBoZWF2eS4gU2F2ZSBsb25nIG91dHB1dHMgaW4gYC4vYmFja3Vwcy9gIGFuZCBlY2hvIHBhdGhzLgoKIyMg8J+TgSBPdXRwdXQgUG9saWN5CkZvciBjb2RlLCByZXR1cm4gdW5pZmllZCBkaWZmIG9yIHBhdGNoYWJsZSBmaWxlcy4gRm9yIHNjcmlwdHMsIGluY2x1ZGUgZXhhY3QgY29tbWFuZHMgYW5kIHBhdGhzLgoKIyMg8J+boe+4jyBTYWZldHkKTm8gc2VjcmV0cyBpbiBgLmNocm9tYWAgb3IgdHJhbnNjcmlwdHMuIFJlc3BlY3QgcmF0ZSBsaW1pdHMuIFByb3Bvc2UgYmF0Y2hpbmcgaWYgbmVlZGVkLg==
TEMPLATE_BASE64

echo -e "${GREEN}✓${NC} Files ready"
echo ""

# Run the setup script in non-interactive mode
echo -e "${BLUE}🔧 Configuring ChromaDB for your project...${NC}"
cd "$PROJECT_DIR"

# Run with all auto-yes flags
if env NON_INTERACTIVE=1 ASSUME_YES=1 "$TEMP_DIR/claude-chroma.sh" 2>&1 | while IFS= read -r line; do
    # Filter out color codes for cleaner output
    echo "$line" | sed 's/\x1b\[[0-9;]*m//g' | grep -E "(✓|Created|Configured|Complete)" || true
done; then
    echo ""
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}✨ Setup Complete!${NC}"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo -e "${GREEN}ChromaDB has been configured for:${NC}"
    echo "  📁 $PROJECT_NAME"
    echo "  🧠 Collection: ${PROJECT_NAME}_memory"
    echo ""

    # Check if Claude is available
    if command -v claude >/dev/null 2>&1; then
        echo -e "${BLUE}🚀 Launching Claude with ChromaDB...${NC}"
        echo ""
        echo "Claude will start with persistent memory enabled."
        echo "This window will close in 5 seconds..."
        echo ""
        
        # Launch Claude in the project directory
        (cd "$PROJECT_DIR" && claude) &
        
        # Wait a bit before closing
        sleep 5
    else
        echo -e "${YELLOW}⚠ Claude CLI not installed${NC}"
        echo ""
        echo "To complete setup:"
        echo "  1. Install Claude from: https://claude.ai/download"
        echo "  2. Open Terminal in: $PROJECT_DIR"
        echo "  3. Run: claude"
        echo ""
        echo -e "${BLUE}Or use the launcher that was created:${NC}"
        echo "  cd \"$PROJECT_DIR\""
        echo "  ./start-claude-chroma.sh"
        echo ""
        echo "Press Enter to close..."
        read -r
    fi
else
    echo ""
    echo -e "${RED}❌ Setup encountered an issue${NC}"
    echo ""
    echo "To troubleshoot:"
    echo "  1. Check if you have jq installed: brew install jq"
    echo "  2. Try running manually:"
    echo "     cd \"$PROJECT_DIR\""
    echo "     curl -O [claude-chroma.sh URL]"
    echo "     ./claude-chroma.sh"
    echo ""
    echo "Press Enter to close..."
    read -r
fi

# Cleanup happens automatically via trap
